package similarity_test

import (
	"fmt"

	"github.com/ajdnik/imghash/hashtype"
	. "github.com/ajdnik/imghash/similarity"

	"testing"
)

var pccUInt8Tests = []struct {
	hash1 hashtype.UInt8
	hash2 hashtype.UInt8
	res   Distance
	err   error
}{
	{hashtype.UInt8{132, 0, 254, 247, 53, 127, 136, 143, 64, 77, 159, 158, 112, 147, 100, 142, 137, 156, 140, 89, 128, 124, 124, 179, 108, 137, 134, 122, 145, 126, 134, 129, 118, 146, 134, 129, 124, 133, 132, 133}, hashtype.UInt8{167, 246, 10, 0, 125, 193, 254, 203, 220, 156, 116, 176, 226, 154, 138, 185, 195, 174, 155, 143, 213, 154, 170, 210, 125, 152, 173, 167, 182, 171, 165, 183, 157, 179, 174, 162, 161, 171, 158, 194}, 0.2461430831761845, nil},
	{hashtype.UInt8{132, 0, 254, 247, 53, 127, 136, 143, 64, 77, 159, 158, 112, 147, 100, 142, 137, 156, 140, 89, 128, 124, 124, 179, 108, 137, 134, 122, 145, 126, 134, 129, 118, 146, 134, 129, 124, 133, 132, 133}, hashtype.UInt8{126, 181, 255, 0, 154, 228, 74, 108, 156, 162, 119, 63, 136, 172, 106, 108, 104, 140, 153, 121, 106, 129, 93, 134, 157, 144, 131, 89, 122, 148, 111, 132, 137, 112, 139, 125, 135, 135, 98, 118}, 0.6330141374942035, nil},
	{hashtype.UInt8{71, 67, 255, 38, 179, 87, 159, 70, 0, 106, 39, 66, 72, 101, 62, 65, 81, 82, 85, 53, 55, 71, 55, 60, 67, 85, 64, 58, 72, 68, 74, 70, 65, 76, 83, 69, 54, 68, 64, 73}, hashtype.UInt8{167, 246, 10, 0, 125, 193, 254, 203, 220, 156, 116, 176, 226, 154, 138, 185, 195, 174, 155, 143, 213, 154, 170, 210, 125, 152, 173, 167, 182, 171, 165, 183, 157, 179, 174, 162, 161, 171, 158, 194}, 0.3157572633173838, nil},
	{hashtype.UInt8{75, 57, 255, 131, 44, 1, 119, 93, 0, 152, 75, 61, 52, 49, 51, 98, 71, 44, 85, 100, 52, 64, 93, 61, 99, 80, 74, 95, 72, 79, 69, 75, 87, 75, 64, 57, 62, 76, 65, 74}, hashtype.UInt8{71, 67, 255, 38, 179, 87, 159, 70, 0, 106, 39, 66, 72, 101, 62, 65, 81, 82, 85, 53, 55, 71, 55, 60, 67, 85, 64, 58, 72, 68, 74, 70, 65, 76, 83, 69, 54, 68, 64, 73}, 0.5801447626911945, nil},
	{hashtype.UInt8{94, 111, 255, 58, 0, 98, 37, 3, 111, 71, 72, 50, 129, 131, 75, 86, 70, 161, 168, 86, 138, 115, 113, 99, 92, 109, 60, 104, 131, 105, 95, 104, 106, 86, 90, 85, 118, 108, 80, 113}, hashtype.UInt8{126, 181, 255, 0, 154, 228, 74, 108, 156, 162, 119, 63, 136, 172, 106, 108, 104, 140, 153, 121, 106, 129, 93, 134, 157, 144, 131, 89, 122, 148, 111, 132, 137, 112, 139, 125, 135, 135, 98, 118}, 0.5220225040812566, nil},
	{hashtype.UInt8{94, 111, 255, 58, 0, 98, 37, 3, 111, 71, 72, 50, 129, 131, 75, 86}, hashtype.UInt8{121, 106, 129, 93, 134, 157, 144, 131, 89}, 0, ErrNotSameLength},
}

func TestPCCUInt8(t *testing.T) {
	for _, tt := range pccUInt8Tests {
		t.Run(fmt.Sprintf("%v", tt.res), func(t *testing.T) {
			res, err := PCCUInt8(tt.hash1, tt.hash2)
			if !res.Equal(tt.res) {
				t.Errorf("got %v, want %v", res, tt.res)
			}
			if err != tt.err {
				t.Errorf("got %v, want %v", err, tt.err)
			}
		})
	}
}

func ExamplePCCUInt8() {
	hash1 := hashtype.UInt8{93, 134, 157, 144, 131, 89, 122, 148}
	hash2 := hashtype.UInt8{140, 153, 121, 106, 129, 93, 134, 157}
	hash3 := hashtype.UInt8{179, 87, 159, 70, 0, 106, 39, 66}

	res1, _ := PCCUInt8(hash1, hash2)
	res2, _ := PCCUInt8(hash1, hash3)
	fmt.Println(res1)
	fmt.Println(res2)
	// Output:
	// 0.7313844312739906
	// 0.5830834602203031
}

var pccFloat64Tests = []struct {
	hash1 hashtype.Float64
	hash2 hashtype.Float64
	res   Distance
	err   error
}{
	{hashtype.Float64{0.001682934993677429, 3.9036864281658695e-09, 3.0554937212039115e-12, 1.4691471346003442e-10, -9.080795312922549e-22, 8.897371996993657e-15, 2.977306503666137e-21, 0.0012797434138170877, 4.388911176819886e-10, 3.0096420635170045e-12}, hashtype.Float64{0.0024918588682241983, 2.6668418711805042e-08, 4.7072384155490496e-11, 2.830058934952091e-11, 3.462076470427119e-22, -4.50702081334241e-15, -9.731964400970534e-22, 0.0016590587234915884, 5.054257634038301e-09, 3.545330848595035e-11}, 0.9975744774551086, nil},
	{hashtype.Float64{0.007840559221738475, 2.2034498359157744e-07, 8.684939637320095e-09, 1.3195340752596305e-08, 1.361994698531565e-16}, hashtype.Float64{0.002662394563829838, 8.300904725182467e-08, 1.4588163678577022e-09, 1.7799284933778596e-09, 1.972364977368551e-18}, 1.0000000052112048, nil},
	{hashtype.Float64{0.003941680044858082, 4.051369372556929e-07, 2.811861997021288e-11, 5.705112955860052e-10}, hashtype.Float64{0.0025293177387043795, 1.4356598602797603e-08, 1.8704987719836307e-10, 1.6439303696445385e-12, -4.875692849536562e-24, -6.192153867552066e-17, 2.841197567643476e-23}, 0, ErrNotSameLength},
}

func TestPCCFloat64(t *testing.T) {
	for _, tt := range pccFloat64Tests {
		t.Run(fmt.Sprintf("%v", tt.res), func(t *testing.T) {
			res, err := PCCFloat64(tt.hash1, tt.hash2)
			if !res.Equal(tt.res) {
				t.Errorf("got %v, want %v", res, tt.res)
			}
			if err != tt.err {
				t.Errorf("got %v, want %v", err, tt.err)
			}
		})
	}
}

func ExamplePCCFloat64() {
	hash1 := hashtype.Float64{5.188434119386236e-09, 4.112809393169052e-11, 2.4301287246914963e-12}
	hash2 := hashtype.Float64{-4.865894404868708e-23, 0.0012375374902843692, 1.6038385709207788e-10}
	hash3 := hashtype.Float64{6.743101958369291e-09, 4.991671383226105e-12, 4.0181156557344116e-12}

	res1, _ := PCCFloat64(hash1, hash2)
	res2, _ := PCCFloat64(hash1, hash3)
	fmt.Println(res1)
	fmt.Println(res2)
	// Output:
	// 0.9999789450188745
	// 0.9986890376061919
}
